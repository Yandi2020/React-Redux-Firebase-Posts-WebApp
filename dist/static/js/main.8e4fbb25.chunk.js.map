{"version":3,"sources":["01-components/layout /SignedInLinks.js","02-store/actions/authActions.js","01-components/layout /SignedOutLinks.js","01-components/layout /Navbar.js","01-components/dashboard/Notifications.js","01-components/projects/ProjectSummary.js","01-components/projects/ProjectList.js","01-components/dashboard/Dashboard.js","01-components/projects/ProjectDetails.js","01-components/auth/SignIn.js","01-components/auth/SignUp.js","01-components/projects/CreateProject.js","02-store/actions/projectActions.js","App.js","serviceWorker.js","02-store/reducers/authReducer.js","02-store/reducers/projectReducer.js","02-store/reducers/rootReducer.js","03-config/fbConfig.js","index.js"],"names":["connect","dispatch","signOut","getState","getFirebase","auth","then","type","props","className","to","onClick","profile","initials","SignedOutLinks","state","console","log","firebase","links","uid","Notifications","notifications","map","item","key","id","user","content","title","moment","time","toDate","fromNow","ProjectSummary","project","authorFirstName","authorLastName","createdAt","calendar","ProjectList","projects","Dashboard","this","Component","compose","firestore","ordered","firestoreConnect","collection","limit","orderBy","ownProps","match","params","data","SignIn","email","password","handleChange","e","setState","target","value","handleSubmit","preventDefault","signIn","authError","onSubmit","htmlFor","onChange","creds","credentials","signInWithEmailAndPassword","catch","err","SignUp","firstName","lastName","signUp","newUser","getFirestore","createUserWithEmailAndPassword","resp","doc","set","CreateProject","createProject","history","push","authorId","add","Date","App","exact","path","component","ProjectDetails","Boolean","window","location","hostname","initState","authReducer","action","message","projectReducer","rootReducer","combineReducers","firestoreReducer","firebaseReducer","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","store","createStore","applyMiddleware","Thunk","withExtraArgument","reduxFirestore","fbConfig","reactReduxFirebase","useFirestoreForProfile","userProfile","attachAuthIsReady","firebaseAuthIsReady","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.8e4fbb25.chunk.js","sourcesContent":["import React from 'react'\nimport { NavLink } from 'react-router-dom'\n\n//24. log user out\nimport { connect } from 'react-redux'\nimport { signOut } from '../../02-store/actions/authActions'\n\nconst SignedInLinks = (props) => {\n    //29. user profile data\n    return(\n        <ul className=\"right\">\n            <li><NavLink to='/create'>New Project</NavLink></li>\n            <li><a onClick={ props.signOut }>Log Out</a></li>\n            <li><NavLink to='/' className=\"btn btn-floating pink lighten-1\"> {props.profile.initials} </NavLink></li>\n        </ul>\n    )\n}\n\n//24. log user out\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        signOut: () => dispatch(signOut())\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(SignedInLinks)\n\n\n","//23. log user in\n\nexport const signIn = (credentials) => {\n    return (dispatch, getState, { getFirebase }) => {\n        const firebase = getFirebase();\n\n        firebase.auth().signInWithEmailAndPassword(\n            credentials.email,\n            credentials.password\n        ).then(() => {\n            dispatch({ type: 'LOGIN_SUCCESS' })\n        }).catch((err) => {\n            dispatch({ type: 'LOGIN_ERROR', err})\n        })\n    }\n}\n\n//24. log user out\nexport const signOut = () => {\n    return (dispatch, getState, { getFirebase }) => {\n        const firebase = getFirebase();\n\n        firebase.auth().signOut().then(() => {\n            dispatch({ type: 'SIGNOUT_SUCCESS' })\n        })\n    }\n}\n\n//28. user sign up firebase Auth\nexport const signUp = (newUser) => {\n    return(dispatch, getState, { getFirebase, getFirestore }) => {\n        const firebase = getFirebase();\n        const firestore = getFirestore();\n\n        firebase.auth().createUserWithEmailAndPassword(\n            newUser.email,\n            newUser.password\n        ).then((resp) => {\n            return firestore.collection('users').doc(resp.user.uid).set({\n                firstName: newUser.firstName,\n                lastName: newUser.lastName,\n                initials: newUser.firstName[0] + newUser.lastName[0]\n            })\n        }).then(() => {\n            dispatch({ type: 'SIGNUP_SUCCESS' })\n        }).catch((err) => {\n            dispatch({ type: 'SIGNUP_ERROR', err})\n        })\n    }\n} \n\n\n\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nconst SignedOutLinks = () => {\n    return(\n        <ul className=\"right\">\n            <li><NavLink to='/signin'>Sign In</NavLink></li>\n            <li><NavLink to='/signup'>Sign Up</NavLink></li>\n        </ul>\n    )\n}\n\nexport default SignedOutLinks","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport SignedInLinks from './SignedInLinks'\nimport SignedOutLinks from './SignedOutLinks'\n\n//22. connect this component with redux store\n//we do not need connect this component to firestore\n//because firebase Auth status is syncing with redux\nimport { connect } from 'react-redux'\n\nconst Navbar = (props) => {\n    const { auth, profile } = props;\n\n    //25. track auth status\n    //29. user profile data \n    const links = auth.uid ? <SignedInLinks profile={ profile } /> : <SignedOutLinks />\n\n    return(\n        <nav className=\"nav-wrapper grey darken-3\">\n            <div className=\"container\">\n                <Link to='/' className=\"brand-logo\">MarioPlan</Link>\n                { links }\n            </div>\n        </nav>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    console.log(state);\n\n    //25. track auth status\n    return {\n        auth: state.firebase.auth,\n\n        //29. user profile data\n        profile: state.firebase.profile\n    }\n}\n\nexport default connect(mapStateToProps)(Navbar)\n","import React from 'react'\n\n//38.\nimport moment from 'moment'\n\n//35. notifications\nconst Notifications = (props) => {\n    //38. notifications\n    const { notifications } = props;\n\n    return(\n        <div className=\"section\">\n            <div className=\"card z-depth-0\">\n                <div className=\"card-content\">\n                    <span className=\"card-title\">Notifications</span>\n                    <ul className=\"notifications\">\n                        {\n                            notifications && notifications.map(item => {\n                                return(\n                                    <li key={item.id}>\n                                        <span className=\"pink-text\">{item.user} </span>\n                                        <span>{item.content}</span>\n                                        <div className=\"cyan-text darken-4\">{item.title}</div>\n                                        <div className=\"grey-text notification\">\n                                            {moment(item.time.toDate()).fromNow()}\n                                        </div>\n                                    </li>\n                                )\n                            })\n                        }\n                    </ul>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Notifications\n","import React from 'react'\n\n//12. receive project as props and output data \n\n//31. format dates, npm install moment\nimport moment from 'moment'\n\nconst ProjectSummary = ({ project }) => {\n    return(\n        <div className=\"card z-depth-0 project-summary\">\n            <div className=\"card-content grey-text text-darken-3\">\n                <span className=\"card-title\">{ project.title }</span>\n                <p>Posted by {project.authorFirstName} {project.authorLastName}</p>\n                <p className=\"grey-text\">{ moment(project.createdAt.toDate()).calendar() }</p>\n            </div>\n        </div>\n    )\n}\n\nexport default ProjectSummary\n\n\n","import React from 'react'\nimport ProjectSummary from './ProjectSummary'\n\n//20. project details, use <Link>\nimport { Link } from 'react-router-dom'\n\n//12. project && project.map(), first to check if we have a project, if yes then do map function\n//otherwise do nothing;\n\n//then pass each project as props down to component ProjectSummary as well \n\nconst ProjectList = ({ projects }) => {\n    return(\n        <div className=\"project-list section\">\n            { projects && projects.map(project => {\n                return(\n                    <Link to={ '/project/' + project.id } key={project.id}>\n                        <ProjectSummary project={project} />\n                    </Link>\n                )\n            }) }\n        </div>\n    )\n}\n\nexport default ProjectList","import React, { Component } from 'react'\nimport Notifications from './Notifications'\nimport ProjectList from '../projects/ProjectList'\n\n//12. dummy data example\nimport { connect } from 'react-redux'\n\n//19. we also need to tell firestoreReducer which data collection need syncing\n//use firestoreConnect as HOC, connect this component with firestore collection\nimport { firestoreConnect } from 'react-redux-firebase'\nimport { compose } from 'redux'\n\n//27. route guarding\nimport { Redirect } from 'react-router-dom'\n\nclass Dashboard extends Component {\n    render(){\n        //console.log(this.props);\n        const { projects, auth, notifications } = this.props;\n\n        //27. route guarding, if not loged user, only show login page\n        if(!auth.uid) return <Redirect to='/signin' />\n\n        return(\n            <div className=\"dashboard container\">\n                <div className=\"row\">\n                    <div className=\"col s12 m6\">\n                        <ProjectList projects={projects} />\n                    </div>\n\n                    <div className=\"col s12 m5 offset-m1\">\n                        <Notifications notifications={notifications}/>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n} \n\n//12. mapping data from redux store and pass it to this component as props \n\nconst mapStateToProps = (state) => {\n    //console.log(state);\n    // return {\n    //     projects: state.project.projects\n    // }\n\n    //27. route guarding\n    //38. notifications\n    return {\n        projects: state.firestore.ordered.projects,\n        auth: state.firebase.auth,\n        notifications: state.firestore.ordered.notifications\n    }\n}\n\n//19. using different HOC need compose function\nexport default compose(\n    connect(mapStateToProps),\n\n    //this array contains different objects, which is collection in firestore\n    //when this component is active, it will listen collection projects, when\n    //firestore data is changed, then firestoreReducer sync redux state with\n    //this collection in firestore\n\n    //38. show notifications\n    //39. order firestore data\n    firestoreConnect([\n        { collection: 'projects', limit: 6, orderBy: ['createdAt', 'desc'] },\n        { collection: 'notifications', limit: 5, orderBy: ['time', 'desc']}\n    ])\n)(Dashboard)\n\n//40. deploy\n//npm run build, build the app and put it in build folder, in our case, we need to cut all files to \n//dist folder then: firebase deploy \n\n\n","import React from 'react'\n\n//20. we need to connect this component with redux store and firestore\nimport { connect } from 'react-redux'\nimport { firestoreConnect } from 'react-redux-firebase'\nimport { compose } from 'redux'\n\n//27. route guarding\nimport { Redirect } from 'react-router-dom'\n\n//31. format dates with moment JS\nimport moment from 'moment'\n\nconst ProjectDetails = (props) => {\n    //console.log(props);\n    //const id = props.match.params.id;\n\n    const { project, auth } = props;\n\n    //27. route guarding, if not loged user, only show login page\n    if(!auth.uid) return <Redirect to='/signin' />\n\n    if(project){\n        return (\n            <div className=\"container section project-details\">\n                <div className=\"card z-depth-0\">\n                    <div className=\"card-content\">\n                        <span className=\"card-title\">{ project.title }</span>\n                        <p>{ project.content }</p>\n                    </div>\n                    <div className=\"card-action lighten-4 grey-text\">\n                        <div>Posted by { project.authorFirstName } { project.authorLastName }</div>\n                        <div>{ moment(project.createdAt.toDate()).calendar() }</div>\n                    </div>\n                </div>\n            </div>\n        )\n    }else{\n        return (\n            <div className=\"container center\">\n                <p>Loading Project ...</p>\n            </div>\n        )\n    }\n}\n\n//20.ownProps is the props of the component, we cannot access props of the component \n//directly inside mapStateToProps\nconst mapStateToProps = (state, ownProps) => {\n    //console.log(state);\n    const id = ownProps.match.params.id;\n    const projects = state.firestore.data.projects;\n    const project = projects ? projects[id] : null;\n\n    return {\n        project: project,\n        auth: state.firebase.auth\n    }\n}\n\nexport default compose(\n    connect(mapStateToProps),\n    firestoreConnect([\n        { collection: 'projects' }\n    ])\n)(ProjectDetails)\n\n\n","import React, { Component } from 'react'\n\n//23. log user in, need mapDispatchToProps so we have access signIn method\n//which is in authActions.js \nimport { connect } from 'react-redux'\nimport { signIn } from '../../02-store/actions/authActions'\n\n//27. route guarding\nimport { Redirect } from 'react-router-dom'\n\nclass SignIn extends Component {\n    state = {\n        email: null,\n        password: null\n    }\n\n    handleChange = (e) => {\n        //console.log(e);\n\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        //console.log(this.state);\n\n        //23.log user in\n        this.props.signIn(this.state);\n    }\n\n    render() {\n        //23.log user in\n        const { authError, auth } = this.props;\n\n        //27. route guarding, if user logged in, do not show login page\n        if(auth.uid) return <Redirect to='/' />\n\n        return (\n            <div className=\"container\">\n                <form onSubmit={ this.handleSubmit } className=\"white\">\n                    <h5 className=\"grey-text text-darken-3\">Sign In</h5>\n                    <div className=\"input-field\">\n                        <label htmlFor=\"email\">Email</label>\n                        <input type=\"email\" id=\"email\" onChange={ this.handleChange } />\n                    </div>\n                    <div className=\"input-field\">\n                        <label htmlFor=\"password\">Password</label>\n                        <input type=\"password\" id=\"password\" onChange={ this.handleChange } />\n                    </div>\n                    <div className=\"input-field\">\n                        <button className=\"btn pink lighten-1 z-depth-0\">Login</button>\n                        <p className=\"red-text center\">\n                            { authError ? <p>{ authError }</p> : null }\n                        </p>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n\n//23. log user in\nconst mapStateToProps = (state) => {\n    return {\n        authError: state.auth.authError,\n        auth: state.firebase.auth\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        signIn: (creds) => dispatch( signIn(creds) )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignIn)\n\n\n\n\n\n\n","import React, { Component } from 'react'\n\n//27. route guarding\nimport { Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\n//28. user sign up firebase Auth\nimport { signUp } from '../../02-store/actions/authActions'\n\nclass SignUp extends Component {\n    state = {\n        email: null,\n        password: null,\n        firstName: null,\n        lastName: null\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        //console.log(this.state);\n\n        //28. user sign up firebase Auth\n        this.props.signUp(this.state);\n    }\n\n    render(){\n        //27. route guarding, if user logged in, do not show signup page\n        const { auth, authError } = this.props;\n        if(auth.uid) return <Redirect to='/' />\n\n        return(\n            <div className=\"container\">\n                <form onSubmit={ this.handleSubmit } className=\"white\">\n                    <h5 className=\"grey-text text-darken-3\">Sign Up</h5>\n                    <div className=\"input-field\">\n                        <label htmlFor=\"email\">Email</label>\n                        <input type=\"email\" id=\"email\" onChange={ this.handleChange } />\n                    </div>\n                    <div className=\"input-field\">\n                        <label htmlFor=\"password\">Password</label>\n                        <input type=\"password\" id=\"password\" onChange={ this.handleChange } />\n                    </div>\n                    <div className=\"input-field\">\n                        <label htmlFor=\"firstName\">First Name</label>\n                        <input type=\"text\" id=\"firstName\" onChange={ this.handleChange } />\n                    </div>\n                    <div className=\"input-field\">\n                        <label htmlFor=\"lastName\">Last Name</label>\n                        <input type=\"text\" id=\"lastName\" onChange={ this.handleChange } />\n                    </div>\n                    <div className=\"input-field\">\n                        <button className=\"btn pink lighten-1 z-depth-0\">Sign Up</button>\n                        <div className=\"red-text center\">\n                            { authError ? <p>{ authError }</p> : null }\n                        </div>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        auth: state.firebase.auth,\n        //28. user sign up firebase Auth\n        authError: state.auth.authError\n    }\n}\n\n//28. user sign up firebase Auth\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        signUp: (newUser) => dispatch(signUp(newUser))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUp)\n\n","import React, { Component } from 'react'\n\n//14. connect this component with redux store\n//and add dispatch action to component as props \nimport { connect } from 'react-redux'\nimport { createProject } from '../../02-store/actions/projectActions'\n\n//27. route guarding\nimport { Redirect } from 'react-router-dom'\n\nclass CreateProject extends Component {\n    state = {\n        title: null,\n        content: null\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        //console.log(this.state);\n\n        //14. thunk\n        this.props.createProject(this.state);\n        //30. revisit create project\n        this.props.history.push('/');\n    }\n\n    render() {\n        //27. route guarding, if not loged user, only show login page\n        const { auth } = this.props;\n        if(!auth.uid) return <Redirect to='/signin' /> \n\n        return (\n            <div className=\"container\">\n                <form onSubmit={ this.handleSubmit } className=\"white\">\n                    <h5 className=\"grey-text text-darken-3\">Create New Project</h5>\n                    <div className=\"input-field\">\n                        <label htmlFor=\"title\">Title</label>\n                        <input type=\"text\" id=\"title\" onChange={ this.handleChange } />\n                    </div>\n                    <div className=\"input-field\">\n                        <label htmlFor=\"content\">Project Content</label>\n                        <textarea id=\"content\" className=\"materialize-textarea\" onChange={ this.handleChange } ></textarea>\n                    </div>\n                    <div className=\"input-field\">\n                        <button className=\"btn pink lighten-1 z-depth-0\">Create</button>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        createProject: (project) => dispatch(createProject(project))\n    }\n}\n\n//27. route guarding\nconst mapStateToProps =(state) => {\n    return {\n        auth: state.firebase.auth\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateProject)\n\n","//* we could use normal firebase library using npm to install it \n\nexport const createProject = (project) => {\n    //14. thunk, dispatch: send an action to reducer\n    //here return a function, hold this dispatch, wait async call, then resume\n\n    //17. connect redux to firebase & firestore\n    // { getFirebase, getFirestore } is extra arguments from thunk \n\n    return (dispatch, getState, { getFirebase, getFirestore }) => {\n        //make async call to database\n        //18. add data to firestore \n        const firestore = getFirestore();\n\n        //30. revisit create project\n        const profile = getState().firebase.profile;\n        const authorId = getState().firebase.auth.uid;\n\n        firestore.collection('projects').add({\n            ...project,\n            authorFirstName: profile.firstName,\n            authorLastName: profile.lastName,\n            authorId: authorId,\n            createdAt: new Date()\n        }).then(() => {\n            //the whole dispatch() is an action\n            dispatch({ type: 'CREATE_PROJECT', project: project });\n        }).catch((err) => {\n            dispatch({ type: 'CREATE_PROJECT_ERROR', err })\n        })\n    }\n}\n\n\n\n","import React, { Component } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\n\n//04. space: layout /Navbar, otherwise cannot find module\nimport Navbar from './01-components/layout /Navbar'\nimport Dashboard from './01-components/dashboard/Dashboard'\n\nimport ProjectDetails from './01-components/projects/ProjectDetails'\nimport SignIn from './01-components/auth/SignIn'\nimport SignUp from './01-components/auth/SignUp'\nimport CreateProject from './01-components/projects/CreateProject'\n\nclass App extends Component {\n  render(){\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar />\n\n          <Switch>\n            <Route exact path='/' component={ Dashboard } />\n            <Route path='/project/:id' component={ ProjectDetails } />\n            <Route path='/signin' component={ SignIn } />\n            <Route path='/signup' component={ SignUp } />\n            <Route path='/create' component={ CreateProject } />\n          </Switch>\n\n        </div>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = { \n    authError: null\n}\n\nconst authReducer = (state = initState, action) => {\n    //23. log user in\n    switch(action.type){\n        case 'LOGIN_ERROR':\n            console.log('login error');\n            return {\n                ...state,\n                authError: 'Login failed'\n            }\n\n        case 'LOGIN_SUCCESS':\n            console.log('login success');\n            return {\n                ...state,\n                authError: null\n            }\n\n    //24. log user out\n        case 'SIGNOUT_SUCCESS':\n            console.log('signout success');\n            return state;\n        \n    //28. user sign up firebase Auth\n        case 'SIGNUP_SUCCESS':\n            console.log('signup success');\n            return{\n                ...state,\n                authError: null\n            }\n\n        case 'SIGNUP_ERROR':\n            console.log('signup error');\n            return{\n                ...state,\n                authError: action.err.message\n            }\n\n        default:\n            return state;\n    }\n}\n\nexport default authReducer\n\n","//12. dummy data example\n\nconst initState = { \n    projects: [\n        {id: '1', title: 'Help me find peach 1', content: 'blah blah blah' },\n        {id: '2', title: 'Help me find peach 2', content: 'blah blah blah' },\n        {id: '3', title: 'Help me find peach 3', content: 'blah blah blah' }\n    ]\n}\n  \nconst projectReducer = (state = initState, action) => {\n    //14. thunk\n\n    switch (action.type){\n        case 'CREATE_PROJECT':\n            console.log('created project', action.project);\n            return state;\n        //18. add data to firestore\n        case 'CREATE_PROJECT_ERROR':\n            console.log('created project error', action.err);\n            return state;\n        default:\n            return state;\n    }\n}\n\nexport default projectReducer\n\n\n","//11. reducers\n\nimport authReducer from './authReducer'\nimport projectReducer from './projectReducer'\nimport { combineReducers } from 'redux'\n\n//we could use firebase library to sync redux state with firestore\n\n//19. sync data with firestore using redux-firestore could be easier\n//it is premade reducer, syncing firestore data with redux state \nimport { firestoreReducer } from 'redux-firestore'\n\n//22. sync Auth status with redux store state, -> firebaseReducer\nimport { firebaseReducer } from 'react-redux-firebase'\n\nconst rootReducer = combineReducers({\n    auth: authReducer,\n    project: projectReducer,\n    firestore: firestoreReducer,\n    firebase: firebaseReducer\n});\n\nexport default rootReducer\n\n\n","//15. Firebase setup\n\n//only firebase core functionality\nimport firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport 'firebase/auth'\n\nvar config = {\n    apiKey: \"AIzaSyCfxinoWEuVW1J_ee2WFMMSWrM7mTWEvfg\",\n    authDomain: \"mario-land-a23d8.firebaseapp.com\",\n    databaseURL: \"https://mario-land-a23d8.firebaseio.com\",\n    projectId: \"mario-land-a23d8\",\n    storageBucket: \"mario-land-a23d8.appspot.com\",\n    messagingSenderId: \"672698074379\",\n    appId: \"1:672698074379:web:9eeb4886d66d410f7c0e0e\",\n    measurementId: \"G-NC4X0YLBPY\"\n}\n\nfirebase.initializeApp(config);\nfirebase.firestore();\n\nexport default firebase\n","//17. react-redux-firebase Version 3 (rrf V3, no enhancers any more)\n//17. Below still using store enhancers V2: npm i redux-firestore@0.5.7 react-redux-firebase@2.2.4 /2.1.8\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//11. redux & reducers 17. compose \nimport { createStore, applyMiddleware, compose } from 'redux'\nimport rootReducer from './02-store/reducers/rootReducer'\nimport { Provider } from 'react-redux'\n\n//14. Thunk redux, hold the dispatch, perform async request, resume dispatch \n//npm install redux-thunk, it needs applyMiddleware \nimport Thunk from 'redux-thunk'\n\n//17. connect redux store to the correct firebase & firestore project \n//npm install react-redux-firebase redux-firestore\nimport { getFirestore, reduxFirestore } from 'redux-firestore'\nimport { getFirebase, reactReduxFirebase } from 'react-redux-firebase'\nimport fbConfig from './03-config/fbConfig'\n\n//14. applyMiddleware(Thunk) can take a list of different middlewares, it returns store \n//enhancers, it enhances the store functionality\n\n//17. Thunk.withExtraArgument({ }) connect firebase & firestore with redux store\n//so in projectActions.js we can use getFirebase, getFirestore to connect with firestore\n\n//17. import compose from redux, compose is a function\n\nconst store = createStore(rootReducer, \n  compose(\n    //this is the first store enhancer, thunk with extra argument\n    applyMiddleware(Thunk.withExtraArgument({ getFirebase, getFirestore })),\n\n    //pass firebase config to those 2 enhancers, { getFirebase, getFirestore } know which project to \n    //connect with\n    reduxFirestore(fbConfig),\n\n    //those 2 enhancers add more functionality to redux store, link store with the correct\n    //project in firebase and firestore \n\n    //26. wait for Auth ready, access method on store (firebaseAuthIsReady)\n    //29. user profile, sync data about user (by uid) in user collection to redux: state - firebase - profile\n    //29. userProfile indicates the name of collection which needs to sync\n    reactReduxFirebase(fbConfig, { useFirestoreForProfile: true, userProfile: 'users', attachAuthIsReady: true })\n  )\n);\n\n//26. not render app to dom, until firebaseAuth is ready, better UX\nstore.firebaseAuthIsReady.then(() => {\n\n  //<Provider> combines react app with redux store together \n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById('root')\n  );\n})\n\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}